// +build ignore

// This program generates words.go. It can be invoked by running
// go generate
package main

import (
	"bufio"
	"log"
	"net/http"
	"os"
	"text/template"
	"time"
)

var (
	categories = map[string]string{
		"":  "Words",
		"*": "Protocols",
		"$": "Ends",
		"%": "Suffixes",
		"^": "Starts",
		"|": "NoEnds",
	}
	wordSet = map[string][]string{}
)

var bullshitURL = "https://code.9front.org/hg/plan9front/raw-file/a9867db350fc/lib/bullshit"

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
// using data from
// {{ .URL }}
package main

var DefaultWordSet = WordSet{
{{- range $key, $value := .WordSet }}
	{{ $key }}: []string{
	{{- range $value }}
		{{ printf "%q" . }},
	{{- end }}
	},
{{- end }}
}
`))

func split(text string) (string, string) {
	if len(text) > 2 && text[len(text)-2:len(text)-1] == " " {
		return text[:len(text)-2], text[len(text)-1:]
	}
	return text, ""
}

func main() {
	resp, err := http.Get(bullshitURL)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	sc := bufio.NewScanner(resp.Body)
	for sc.Scan() {
		word, char := split(sc.Text())
		name, ok := categories[char]
		if !ok {
			log.Fatal("unknown category: ", sc.Text())
		}
		if name == "NoEnds" {
			wordSet["Words"] = append(wordSet["Words"], word)
		}
		wordSet[name] = append(wordSet[name], word)
	}

	f, err := os.Create("words.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		Timestamp time.Time
		URL       string
		WordSet   map[string][]string
	}{
		Timestamp: time.Now(),
		URL:       bullshitURL,
		WordSet:   wordSet,
	})

}
